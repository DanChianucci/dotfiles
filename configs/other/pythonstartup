#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import math
from pprint import pprint

sys.path.append(os.getenv("PWD"))





ANSI_COLS = {"black": 30, "red": 31, "green": 32, "yellow": 33,
             "blue": 34, "purple": 35, "cyan": 36, "white": 37}


def ansi_colorize(text, color, state, prompt=False):
    mod = {"regular": "0;", "bold": "1;", "underline": "4;"}.get(state)
    if mod is None:
        mod = ""
    col = ANSI_COLS.get(color)
    if col is None:
        col = 0
        mod = ""
    elif state == "bright":
        col += 60
        mod = "0;"
    if prompt:
        return "\001\033[{0}{1}m\002{2}\001\033[00m\002".format(mod, col, text)
    return "\033[{0}{1}m{2}\033[00m".format(mod, col, text)


class CustomPS1:
    def __init__(self, prompt=True):
        self.prompt = prompt

    def __str__(self):
        return ansi_colorize(">>> ", "green", "bold", prompt=self.prompt)

    def __len__(self):
        return 4


class CustomPS2:
    def __init__(self, prompt=True):
        self.prompt = prompt

    def __str__(self):
        return ansi_colorize("... ", "yellow", "bold", prompt=self.prompt)

    def __len__(self):
        return 4


def setup_prompt():
    if os.name == 'nt':
        sys.ps1 = CustomPS1(False)
        sys.ps2 = CustomPS2(False)
    else:
        sys.ps1 = CustomPS1()
        sys.ps2 = CustomPS2()


def rl_autoindent():
    """
    Auto-indent upon typing a new line according to the contents of the
    previous line.  This function will be used as Readline's
    pre-input-hook.

    """
    hist_len = readline.get_current_history_length()
    last_input = readline.get_history_item(hist_len)
    try:
        last_indent_index = last_input.rindex("  ")
    except:
        last_indent = 0
    else:
        last_indent = int(last_indent_index / 4) + 1

    if len(last_input.strip()) > 1:
        if last_input.count("(") > last_input.count(")"):
            indent = ''.join(["  " for n in range(last_indent + 2)])

        elif last_input.count(")") > last_input.count("("):
            indent = ''.join(["  " for n in range(last_indent - 1)])

        elif last_input.count("[") > last_input.count("]"):
            indent = ''.join(["  " for n in range(last_indent + 2)])

        elif last_input.count("]") > last_input.count("["):
            indent = ''.join(["  " for n in range(last_indent - 1)])

        elif last_input.count("{") > last_input.count("}"):
            indent = ''.join(["  " for n in range(last_indent + 2)])

        elif last_input.count("}") > last_input.count("{"):
            indent = ''.join(["  " for n in range(last_indent - 1)])

        elif last_input[-1] == ":":
            indent = ''.join(["  " for n in range(last_indent + 1)])

        else:
            indent = ''.join(["  " for n in range(last_indent)])
    readline.insert_text(indent)


def setup_readline():
    try:
        import readline
        readline.set_pre_input_hook(rl_autoindent)
    except ImportError:
        pass


def setup_windows_color():
    try:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
    except (ImportError,AttributeError):
        pass

################################################################################
# Custom No Argument Commends
################################################################################
def clearscreen():
    try:
        return '\r'
    finally:
        os.system('cls' if os.name == 'nt' else 'clear')


class FuncCaller:
    def __init__(self, func, *args, **kwargs):
        from functools import partial
        self.func = partial(func, *args, **kwargs)

    def __call__(self):
        return self.func()

    __repr__ = __call__

    __str__ = __call__


if __name__ == "__main__":
    __builtins__.clear = FuncCaller(clearscreen)
    __builtins__.exit = FuncCaller(sys.exit)
    setup_readline()
    setup_prompt()
    setup_windows_color()
